/* eslint-disable react/prop-types */
/* eslint-disable curly */
import React, { useEffect, useState } from "react";
import {
  Button,
  Form,
  Input,
  Modal,
  Popover,
  Table,
  Tag,
  Tooltip,
  Typography,
} from "antd";
import { QuestionCircleOutlined, SyncOutlined } from "@ant-design/icons";
import dayjs from "dayjs";
import { useQuery } from "react-query";
import LoadingSpinner from "metabase/components/LoadingSpinner/LoadingSpinner";
import { getRefAuditList } from "metabase/new-service";

const RefAuditTable = ({ operator, type }) => {
  const [param, setParam] = useState({ status: "pending review" });
  const [remark, setRemark] = useState("");
  const [openAuditModal, setOpenAuditModal] = useState({
    open: false,
    item: null,
  });
  useEffect(() => {
    if (type === "pending") {
      setParam({ status: "pending review" });
    } else {
      setParam({ status: "" });
    }
  }, [type]);

  const isLoading = false;
  const data = [
    {
      id: "64f9b4337ff2a2989e1d54d2",
      submit_record_id: "64f9b4337ff2a2989e1d54d3",
      created_at: "2023-09-07T19:29:55.865+08:00",
      updated_at: "2023-09-07T19:39:23.946+08:00",
      protocol_slug: "worlds-beyond",
      old_protocol_obj: {
        protocol_slug: "worlds-beyond",
        protocol_type: null,
        protocol_sub_type: null,
        protocol_name: "Worlds Beyond",
        logo: null,
        discord: null,
        github: null,
        twitter: null,
        telegram: null,
        web_url: "https://worldsbeyondnft.com/",
        description: null,
        categories: null,
      },
      new_protocol_obj: {
        protocol_slug: "worlds-beyond",
        protocol_type: "GameFi",
        protocol_sub_type: null,
        protocol_name: "Worlds Beyond",
        logo: "https://strapi.scand.app/uploads/Worlds_Beyond_Logo_b39dfbbd7f.jpg",
        discord: "https://discord.gg/worldsbeyond",
        github: null,
        twitter: "https://twitter.com/worldsbeyondnft",
        telegram: null,
        web_url: "https://worldsbeyondnft.com/",
        description:
          "Worlds Beyond is a AI-empowered creator platform consisting of uniquely autogenerated lands of different biomes where owners can fully customise and build diverse experiences for others to enjoy.",
        categories: ["Gaming", "NFT"],
      },
      status: "pending review",
      reason: null,
      created_by: "alex",
      audit_by: "alex",
    },
  ];
  const {
    isLoading: Loading,
    data: data2,
    refetch,
  } = useQuery(
    ["getRefAuditList", param],
    async () => {
      return await getRefAuditList(param);
    },
    {
      refetchOnWindowFocus: false,
      retry: 2,
      // refetchInterval: 10000,
    },
  );

  const onAudit = (item, remark, pass = false) => {
    console.log(item, remark, pass);

    setRemark("");
    setOpenAuditModal({ open: false, item: null });
  };

  const columns = [
    {
      title: "Name",
      render: (_, record) => {
        return (
          <>
            <Typography.Text>{record?.protocol_slug}</Typography.Text>
          </>
        );
      },
    },
    {
      title: "Old",
      render: (_, record) => {
        return (
          <Typography.Paragraph>
            <pre>{JSON.stringify(record?.old_protocol_obj)}</pre>
          </Typography.Paragraph>
        );
      },
    },
    {
      title: "New",
      render: (_, record) => {
        return (
          <Typography.Paragraph>
            <pre>{JSON.stringify(record?.new_protocol_obj)}</pre>
          </Typography.Paragraph>
        );
      },
    },
    {
      title: "Submitted by",
      // width: 240,
      render: (_, record) => {
        if (record?.created_by === "") {
          record.created_by = null;
        }
        if (record?.email === "") {
          record.email = null;
        }
        return (
          <Typography.Text>
            {record?.created_by ?? record?.email ?? "-"}
          </Typography.Text>
        );
      },
    },
    {
      title: "Submitted at",
      dataIndex: "created_at",
      render: text => {
        return dayjs(text).format("YYYY-MM-DD HH:mm");
      },
    },
    {
      title: "Status",
      render: (_, { status, createdAt, reason }) => {
        const text = status;
        switch (text) {
          case "error":
            return <Tag color="error">{text}</Tag>;
          case "pending review":
          case "pending":
            return <Tag color="processing">{"pending"}</Tag>;
          case "submitted":
            return <Tag color="success">{text}</Tag>;
          case "rejected":
            return (
              <Tooltip title={reason}>
                <Tag color="error">{text}</Tag>
              </Tooltip>
            );
          default:
            <Tag color="warning">{"fail"}</Tag>;
        }
      },
    },
    {
      title: "Actions",
      render: (_, record) => {
        return (
          <div>
            <Button
              type="primary"
              onClick={() => {
                setOpenAuditModal({ open: true, item: record });
              }}
            >
              Audit
            </Button>
          </div>
        );
      },
    },
  ].filter(i => i);

  return (
    <>
      {isLoading ? (
        <LoadingSpinner message="Loading..." />
      ) : (
        <Table
          size="small"
          rowKey="_id"
          columns={columns}
          dataSource={data}
          pagination={false}
        />
      )}
      {openAuditModal?.open && (
        <Modal
          open={openAuditModal?.open}
          title={`Audit [${openAuditModal?.item?.protocol_slug}]`}
          onCancel={() => {
            setOpenAuditModal({ open: false, item: null });
          }}
          footer={null}
        >
          <div className="flex flex-col w-full mt-10">
            <Input.TextArea
              rows={10}
              placeholder="Input the remark of this submit record."
              onChange={e => {
                setRemark(e.target.value);
              }}
            />
            <div className=" flex flex-row-reverse w-full mt-20">
              <Button
                type="primary"
                className=" ml-10"
                onClick={() => {
                  onAudit(openAuditModal?.item, remark, true);
                }}
              >
                Pass
              </Button>

              <Button
                type="default"
                onClick={() => {
                  onAudit(openAuditModal?.item, remark, false);
                }}
              >
                Reject
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </>
  );
};

export default RefAuditTable;
